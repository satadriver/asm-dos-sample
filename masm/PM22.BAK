.386p
gdtseg segment para use16
gdt0 dq 0
gdt1  dq 000098000000ffffh
gdt2  dq 004098000000ffffh
gdt3  dq 004098000000ffffh
gdt4  dq 004098000000ffffh
gdt5  dq 004098000000ffffh
gdt6  dq 004098000000ffffh
gdt7  dq 004098000000ffffh
gdt8  dq 004098000000ffffh

gdt9  dq 0000920b8000ffffh  ;data
gdt10 dq 0040f20a0000ffffh

gdt11 dq 0040920000000FFFh  ;stack0
gdt12 dq 0040b20000000FFFh
gdt13 dq 0040d20000000FFFh
gdt14 dq 0040f20000000fffh
gdt15 dq 0040920200000fffh

gdt16 dq 0040890000000068h  ;tss
gdt17 dq 0000890000000068h  ;why 40e9 not 4089???
gdt18 dq 0040890000000068h
gdt19 dq 0000890000000068h
gdt20 dq 0000890000000068h

gdt21 dq 0000850000000000h  ;task
gdt22 dq 0000850000000000h
gdt23 dq 0000850000000000h
gdt24 dq 0000850000000000h

gdt25 dq 00008c0000100000h  ;callgate
gdt26 dq 00008c0000200000h
gdt27 dq 00008c0000000000h
gdt28 dq 00008c0000000000h
gdtlen=$-gdt0
gdtseg ends

gdtpointer segment para use16
gdtlimit dw gdtlen-1
gdtbase dd 0
gdtpointer ends

tssseg1 segment para use16
dd 0
dd 400h
dd  58H
dd 400h
dd   61H
dd 400h
dd   6AH
dd 18 dup (0)
dw 0
dw $+2
db 0ffh
tssseg1 ends

tssseg2 segment para use16
dd 0         ;CHAIN
dd 400h     ;ESP0
dd   58H     ;SS0
dd 400h     ;ESP1
dd   61H     ;SS1
dd 400h     ;ESP2
dd   6AH     ;SS2
dd 0          ;CR3
dd 0          ;EIP
DD 0          ;EFLAGES
DD 0          ;EAX
DD 0          ;ECX
DD 0          ;EDX
DD 0          ;EBX
DD 400H       ;ESP
DD 0          ;EBP
DD 0           ;ESI
DD 0             ;EDI
DD 50H             ;ES
dd 18H     ;CS
dd 78H              ;SS
DD 50H            ;DS
DD 50H            ;FS
DD 50H            ;GS
DD 0              ;LDT
dw 0              ;BIT T
dw $+2            ;IO MAP ADDRESS
db 0ffh
tssseg2 ends

stack0 segment para use16
db 1000h dup (0)
stack0 ends
stack1 segment para use16
db 1000h dup (0)
stack1 ends
stack2 segment para use16
db 1000h dup (0)
stack2 ends
stack3 segment para use16
db 1000h dup (0)
stack3 ends

code1 segment para use16
assume cs:code1
MOV AX,80H
LTR AX
DB 09AH
DW 0
DW 0c8H

TOREAL:
CLTS
MOV AX,48H
MOV DS,AX
MOV ES,AX
MOV FS,AX
MOV GS,AX
MOV SS,AX
MOV EAX,CR0
AND AL,0FEH
MOV CR0,EAX
JMP FAR PTR REAL
code1 ends

code2 segment para use32
assume cs:code2
mov ax,50h
mov es,ax
mov ax,58h
mov ss,ax
mov di,0
mov al,2
mov ecx,0fffh
rep stosb
l1:in al,60h
cmp al,39h
jnz l1

DB 9AH
DW 0
DW 0
DW 88H



;l0:in al,60h
;cmp al,1
;jnz l0
mov ax,58h ;tss2 is busy,stack0 can't be use to call another programm!!!!!!!!!!!
mov ss,ax
DB 09AH
DW 0
DW 0
DW 0d0h
code2 ends


code3 segment para use32
assume cs:code3

mov edi,0
MOV AL,4
MOV ECX,0FFFH
REP STOSB

;mov ax,58h
;mov ss,ax
;db 09ah
;dw offset toreal
;dw 0
;dw 8

RETf
code3 ends

code4 segment para use32
assume cs:code4

db 09ah
dw offset toreal
dw 0
dw 8

mov ax,48h
mov ds,ax
mov ES,AX
MOV FS,AX
MOV GS,AX
MOV SS,AX
MOV EAX,CR0
AND AL,0FEH
MOV CR0,EAX
JMP FAR PTR REAL
code4 ends

code0 segment para use16
assume cs:code0,ds:gdtseg,es:gdtpointer
start:
mov ax,gdtpointer
mov es,ax
xor eax,eax
mov ax,gdtseg
mov ds,ax
shl eax,4
xor ebx,ebx
mov bx,offset gdt0
add eax,ebx
mov dword ptr es:[gdtbase],eax

xor eax,eax
mov ax,code1
shl eax,4
mov word ptr ds:[gdt1+2],ax
shr eax,16
mov byte ptr ds:[gdt1+4],al

xor eax,eax
mov ax,code2
shl eax,4
mov word ptr ds:[gdt2+2],ax
shr eax,16
mov byte ptr ds:[gdt2+4],al

xor eax,eax
mov ax,code3
shl eax,4
mov word ptr ds:[gdt3+2],AX
SHR EAX,16
MOV BYTE PTR DS:[GDT3+4],AL

XOR EAX,EAX
MOV AX,CODE4
SHL EAX,4
MOV WORD PTR DS:[GDT4+2],AX
SHR EAX,16
MOV BYTE PTR DS:[GDT4+4],AL


XOR EAX,EAX
MOV AX,STACK0
SHL EAX,4
MOV WORD PTR DS:[GDT11+2],AX
SHR EAX,16
MOV BYTE PTR DS:[GDT11+4],AL
XOR EAX,EAX
MOV AX,STACK1
SHL EAX,4
MOV WORD PTR DS:[GDT12+2],AX
SHR EAX,16
MOV BYTE PTR DS:[GDT12+4],AL
XOR EAX,EAX
MOV AX,STACK2
SHL EAX,4
MOV WORD PTR DS:[GDT13+2],AX
SHR EAX,16
MOV BYTE PTR DS:[GDT13+4],AL
XOR EAX,EAX
MOV AX,STACK3
SHL EAX,4
MOV WORD PTR DS:[GDT14+2],AX
SHR EAX,16
MOV BYTE PTR DS:[GDT14+4],AL

xor eax,eax
mov ax,tssseg1
shl eax,4
mov word ptr ds:[gdt16+2],ax
shr eax,16
mov BYTE ptr ds:[gdt16+4],al
mov byte ptr ds:[gdt16+7],ah

XOR EAX,EAX
MOV AX,TSSSEG2
SHL EAX,4
MOV WORD PTR DS:[GDT17+2],AX
SHR EAX,16
MOV BYTE PTR DS:[GDT17+4],AL
mov byte ptr ds:[gdt17+7],ah

MOV AX,13H
INT 10H
MOV AL,2
OUT 92H,AL
CLI
LGDT QWORD PTR ES:[GDTLIMIT]
MOV EAX,CR0
OR AL,1
MOV CR0,EAX
DB 09AH
DW 0
DW 8

REAL:
MOV AX,STACK0
MOV SS,AX
MOV AX,3
INT 10H
MOV AH,4CH
INT 21H
CODE0 ENDS
END START

