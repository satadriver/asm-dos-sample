.386p
tssseg1 segment para use16
org 0
dd 0
dd 0
dd 0
dd 0
dd 0
dd 0
dd 0
dd 0
dd 0
dd 0
dd 8 dup (0)
dd 0
dd 0
dd 0
dd 0
dd 0
dd 0
dd 0
dw 0
dw $+2
DB 100H DUP (0)
db 0ffh
tssseg1 ends

tssseg2 segment para use16
org 0
dd 0h
dd 0              ;ESP0
dd 0              ;SS0
DD 0  
DD 0 
DD 0
DD 0
DD 0               ;CR3
DD 0               ;EIP                     VM 
DD  27002H               ;EFLAGES=10 0111 0000 0000 0010
DD 4 DUP (0)       ;EAX--EBX
DD 400H            ;ESP
DD 0               ;EBP
DD 0               ;ESI
DD 0               ;EDI
DD 0A000H          ;ES
V86CODE      DD 0      ;CS
V86STACK     DD 0      ;SS
DD  0A000H         ;DS
DD  0B800H         ;FS
DD  0B800H         ;GS
DD 0               ;LGT
DW 0               ;T
DW $+2             ;IO MAP ADDR
DB 100H DUP (0)
DB 0FFH
TSSSEG2 ENDS


GDTPOINTER SEGMENT PARA USE16
ORG 0
GDTLIMIT DW GDTLEN-1      ;gdtlen is constant,gdtseg must behind this seg!!!
GDTBASE DD 0
GDTPOINTER ENDS

gdtseg segment para use16
ORG 0
gdt0 dq 0
GDT1 DQ 000098000000FFFFH ;CODE1
GDT2 DQ 00009A000000FFFFH ;V86CODE2 DPL=0 OR DPL=3 ARE BOTH RIGHT!!!!!
GDT3 DQ 0000890000000168H ;TSS1
GDT4 DQ 0000890000000168H ;TSS2
GDT5 DQ 0000920000000FFFH ;STACK0
GDT6 DQ 0000920000000FFFH ;V86STACK3 DPL=3 OR DPL=0 ARE BOTH RIGHT!!!!!!!
GDT7 DQ 0000920a0000ffffh
gdt8 dq 000092060000ffffh
gdt9 dq 000098000000FFFFH ;CODE3
GDT10 DQ 00008C0000480000H
gdt11 dq 000092000000FFFFH
GDTLEN=$-GDT0             ;there before could refer to constant gdtlen
GDTSEG ENDS


STACK0 SEGMENT PARA USE16
DB 1000H DUP (0)
STACK0 ENDS
STACK3 SEGMENT PARA USE16
DB 1000H DUP (0)
STACK3 ENDS

CODE1 SEGMENT PARA USE16
org 0
ASSUME CS:CODE1
MOV AX,40H
MOV SS,AX
MOV AX,38H
MOV DS,AX
MOV ES,AX
MOV FS,AX
MOV GS,AX
MOV AX,18H
LTR AX

DB 09AH
DW 0
DW 20H

LL:IN AL,60H
CMP AL,1H
JNZ LL

db 0EAH
DW 0
DW 50H
TOREAL:     ;can't terminate the task in task itself
CLTS
MOV AX,38H
MOV DS,AX
MOV ES,AX
;MOV SS,AX
MOV GS,AX
MOV FS,AX
MOV EAX,CR0
AND AL,0FEH
MOV CR0,EAX
JMP FAR PTR REAL
CODE1 ENDS

CODE2 SEGMENT PARA USE16
ASSUME CS:CODE2
MOV ECX,0FFFFH
MOV AL,2
REP STOSB
L0:IN AL,60H
CMP AL,1CH
JNZ L0

;db 0eah
;dw 0
;dw 18h
RETF
CODE2 ENDS

CODE3 SEGMENT PARA USE16
ASSUME CS:CODE3
clts
MOV AX,40H
MOV DS,AX
MOV ES,AX
MOV FS,AX
MOV GS,AX

MOV  EAX,CR0
AND AL,0FEH
MOV CR0,EAX
JMP FAR PTR REAL
CODE3 ENDS


CODE0 SEGMENT PARA USE16
ASSUME SS:STACK0,CS:CODE0,DS:GDTSEG,ES:GDTPOINTER
START:
MOV AX,STACK0
MOV SS,AX
MOV AX,GDTPOINTER
MOV ES,AX

XOR EAX,EAX
MOV AX,GDTSEG
MOV DS,AX
SHL EAX,4
XOR EBX,EBX
MOV BX,OFFSET GDT0
ADC EAX,EBX
MOV DWORD PTR ES:[GDTBASE],EAX

ASSUME ES:TSSSEG2  ;after assume,u must assure the number is
MOV AX,TSSSEG2
MOV ES,AX
XOR EAX,EAX
MOV AX,CODE2
MOV WORD PTR ES:[V86CODE],AX
MOV AX,STACK3
MOV WORD PTR ES:[V86STACK],AX
ASSUME ES:GDTPOINTER
MOV AX,GDTPOINTER    ;redefine
MOV ES,AX

XOR EAX,EAX
MOV AX,CODE1
SHL EAX,4
MOV WORD PTR DS:[GDT1+2],AX
SHR EAX,16
MOV BYTE PTR DS:[GDT1+4],AL

XOR EAX,EAX
MOV AX,CODE2
SHL EAX,4
MOV WORD PTR DS:[GDT2+2],AX
SHR EAX,16
MOV BYTE PTR DS:[GDT2+4],AL

XOR EAX,EAX
MOV AX,CODE3
SHL EAX,4
MOV WORD PTR DS:[GDT9+2],AX
SHR EAX,16
MOV BYTE PTR DS:[GDT9+4],AL

XOR EAX,EAX
MOV AX,TSSSEG1
SHL EAX,4
MOV WORD PTR DS:[GDT3+2],AX
SHR EAX,16
MOV BYTE PTR DS:[GDT3+4],AL

XOR EAX,EAX
MOV AX,TSSSEG2
SHL EAX,4
MOV WORD PTR DS:[GDT4+2],AX
SHR EAX,16
MOV BYTE PTR DS:[GDT4+4],AL

XOR EAX,EAX
MOV AX,STACK0
SHL EAX,4
MOV WORD PTR DS:[GDT5+2],AX
SHR EAX,16
MOV BYTE PTR DS:[GDT5+4],AL

XOR EAX,EAX
MOV AX,STACK3
SHL EAX,4
MOV WORD PTR DS:[GDT6+2],AX
SHR EAX,16
MOV BYTE PTR DS:[GDT6+4],AL

CLI 
MOV AX,13H
INT 10H

LGDT QWORD PTR ES:[GDTLIMIT]
MOV AL,2
OUT 92H,AL
MOV EAX,CR0
OR AL,1
MOV CR0,EAX
DB 09AH
DW 0
DW 8

REAL:
MOV AX,STACK0
MOV SS,AX
MOV AX,3
INT 10H
MOV AH,4CH
INT 21H
CODE0 ENDS
END START
