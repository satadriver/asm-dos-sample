.386p
code1 segment para use16
assume cs:code1
db 0eah
dw 0
dw 10h

toreal:                 ;selector---offset format could find here!!!!!
mov ax,38h        
mov ds,ax
mov es,ax
mov fs,ax
mov gs,ax
mov ss,ax
mov eax,cr0
and al,0feh
mov cr0,eax
db 0eah
dw offset rm16
dw seg rm16
code1 ends

code2 segment para use32
assume cs:code2
mov ax,30h
mov ss,ax       ;stack segment is neccesary for interrruption and exception!!!
mov ax,800h
mov sp,ax

mov al,0feh      ;reserve the real timer interruption!??????????
out 0a1h,al  

mov al,0bh
out 70h,al
mov al,0c0h
out 71h,al     
sti
l0:
jmp l0
CODE2 ENDS

CODE3 SEGMENT PARA USE32
ASSUME CS:CODE3
jmp next0
str0 db     "IF YOU HAVE SAW THIS WORDS,REAL TIMER WORKS SUCCESSFULLY,PROTECT MODE I LOVE YOU!$"
next0:
mov ax,18h
mov ds,ax
mov ax,28h
mov es,ax
mov fs,ax
mov gs,ax

mov di,0
mov cx,07ffh
mov ax,2120h     ;caution! why ax=2021h is not correct??think about carefully!
loop0:
mov es:[di],ax
add di,2
loop loop0

mov si,offset str0
mov di,0
mov al,41h
mov bl,24h
cld
next1:
movsb
mov es:[di],al
inc al
inc di
cmp ds:[si],bl
jnz next1

mov ax,0ffffh
l1:mov cx,0ffffh         ;stay a little time for debug
l2:dec cx
cmp cx,0
jnz l2
dec ax
cmp ax,0
jnz l1

mov al,0bh
out 70h,al
mov al,2
out 71h,al

cli
mov al,20h
out 20h,al
mov al,0
out 21h,al
mov al,0
out 0a1h,al
mov al,20h
out 0a0h,al

DB 0EAH                                                  
DW OFFSET TOREAL                   ;offset---selecter
DW 0                                                         
DW 8                                                         
code3 ends

code4 segment para use32
assume cs:code4
iretd
code4 ends

code5 segment para use32
assume cs:code5
iretd
code5 ends

gdtseg segment use16
spptr dw 0
ssptr dw 0
gdtlen dw gdtend-1
gdtbase dd 0
gdt0 dq 0
gdt1 dq 000098000000ffffh
gdt2 dq 004098000000ffffh
gdt3 dq 00409a000000ffffh
gdt4 dq 004098000000ffffh
gdt5 dq 0040920b8000ffffh
gdt6 dq 0040920000000fffh
gdt7 dq 000092000000ffffh
gdt8 dq 004098000000ffffh
gdtend=$-gdt0
gdtseg ends

idtseg segment para use16
DOSIDT DW 0
DD 0
idtlen dw idtend-1
idtbase dd 0
idtbegin=$
rept 70h
dq 00008f0000200000h
endm

dq 00008e0000180000h

rept 143
dq 00008f0000200000h
endm

idtend=$-idtbegin
idtseg ends

stack0 segment para use32
db 1000h dup (0)
stack0 ends

code0 segment para use16
assume cs:code0,ds:gdtseg,es:idtseg
start:
XOR EAX,EAX
MOV AX,GDTSEG
MOV DS,AX
SHL EAX,4
XOR ESI,ESI
MOV SI,OFFSET GDT0
ADD EAX,ESI
MOV DWORD PTR DS:[GDTBASE],EAX

XOR EAX,EAX
MOV AX,CODE1
SHL EAX,4
MOV WORD PTR DS:[GDT1+2],AX
SHR EAX,16
MOV BYTE PTR DS:[GDT1+4],AL

XOR EAX,EAX
MOV AX,CODE2
SHL EAX,4
MOV WORD PTR DS:[GDT2+2],AX
SHR EAX,16
MOV BYTE PTR DS:[GDT2+4],AL

XOR EAX,EAX
MOV AX,CODE3
SHL EAX,4
MOV WORD PTR DS:[GDT3+2],AX
SHR EAX,16
MOV BYTE PTR DS:[GDT3+4],AL

XOR EAX,EAX
MOV AX,CODE4
SHL EAX,4
MOV WORD PTR DS:[GDT4+2],AX
SHR EAX,16
MOV BYTE PTR DS:[GDT4+4],AL

XOR EAX,EAX
MOV AX,CODE5
SHL EAX,4
MOV WORD PTR DS:[GDT8+2],AX
SHR EAX,16
MOV BYTE PTR DS:[GDT8+4],AL

XOR EAX,EAX
MOV AX,STACK0
SHL EAX,4
MOV WORD PTR DS:[GDT6+2],AX
SHR EAX,16
MOV BYTE PTR DS:[GDT6+4],AL

MOV AX,SP
MOV word ptr DS:[SPPTR],AX
MOV AX,SS
MOV  word ptr DS:[SSPTR],AX

XOR EAX,EAX
MOV AX,IDTSEG
MOV ES,AX
SHL EAX,4
XOR ESI,ESI
MOV SI,OFFSET IDTBEGIN
ADD EAX,ESI
MOV DWORD PTR ES:[IDTBASE],Eax

SIDT qword ptr es:[DOSIDT]                       ;neccessary back to dos
lgdt qword ptr ds:[gdtlen]
cli
lidt qword ptr es:[idtlen]                               
mov al,2
out 92h,al
mov eax,cr0
or eax,1
mov cr0,eax
db 0eah
dw 0
dw 8

rm16:    
MOV AX,IDTSEG
MOV ES,AX
LIDT QWORD PTR ES:[DOSIDT]
mov ax,gdtseg
mov ds,ax
lss sp,dword ptr ds:[spptr]                                  ;important 
;sti                        ;if no sti ,keyboard shall be disenabled!!check it!

;but there after the ah=4c,int 21h will enable the keyboard!!!
mov ah,4ch
int 21h
code0 ends
end start

