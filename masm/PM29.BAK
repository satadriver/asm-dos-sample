.386p
stack0 segment para use16
db 1000h dup (0)
stack0 ends

IDTPOINTER  SEGMENT PARA USE16
IDTLIMIT DW IDTLEN-1
IDTBASE DD  0
DOSIDTLIMIT DW 3FFH
DOSIDTBASE DD 0
IDTPOINTER ENDS

IDTSEG SEGMENT PARA USE16
DQ 00008F0000480000H ;0

dq 00008f0000280000H    ;1
DQ 00008F0000480000H  ;2

dq 00008f0000300000h    ;3
                              
DQ 00008F0000480000H  ;4

REPT 3
DQ 00008F0000480000H   ;5---7
ENDM

DQ 00008f0000480000H    ;8
DQ 00008F0000480000H   ;9

REPT 22
DQ 00008F0000480000H
ENDM

dq 00008e0000180000h ;32
dq 00008e0000200000h ;33

rept 222
dq 00008f0000480000h
endm
IDTLEN=$-idtseg
IDTSEG ENDS


GDTPOInTER SEGMENT PARA USE16
GDTLIMIT DW GDTLEN-1
GDTBASE DD 0
GDTPOINTER ENDS

GDTSEG SEGMENT PARA USE16
GDT0 DQ 0
GDT1 DQ 000098000000FFFFH
GDT2 DQ 004098000000FFFFH
GDT3 DQ 004098000000FFFFH   ;clock
GDT4 DQ 00409A000000FFFFH   ;keyboard
GDT5 DQ 00409A000000FFFFH  ;int1 code
GDT6 DQ 00409A000000FFFFH  ;int3 code
GDT7 DQ 004098000000FFFFH
GDT8 DQ 004098000000FFFFH
GDT9 DQ 004098000000FFFFH   ;other interruptions

GDT10 DQ 0040923000000FFFH  ;int stackseg,u must make SS tobe 32bit
GDT11 DQ 0000920B8000FFFFH  ;cause the int rector is 32bit!!!!remember it
                            ;is good to you
GDTLEN=$-gdt0
GDTSEG ENDS

code1 segment para use16
assume cs:code1
CLI
MOV AL,0FFH
OUT 21H,AL
OUT 0A1H,AL
MOV AL,11H ;ICW1 20H,0A0H   0  0  0  0  1     0        0     0         0
OUT 20H,AL ;                                 DIANPING        SINGLE    ICW4
OUT 0A0H,AL

MOV AL,20H ;ICW2 21H,0A1H,IRQ
OUT 21H,AL
MOV AL,28H
OUT 0A1H,AL

MOV AL,4   ;ICW3 21H,0A1H
OUT 21H,AL
MOV AL,2
OUT 0A1H,AL

MOV AL,11H   ;ICW4 21H,0A1H    0  0  0  0  1      0        0        0        1
OUT 21H,AL   ;                            SFNM   BUF      M/S     AEIO     80X86
OUT 0A1H,AL  ;AEIO ISTO SINGLE

db 09ah
dw 0
dw 10h

toreal:
CLI
CLTS
mov ax,58h
mov es,ax
mov ds,ax
mov fs,ax
mov gs,ax
mov ss,ax
mov eax,cr0
and al,0feh
mov cr0,eax
jmp far ptr real
CODE1 ENDS

 
CODE2 SEGMENT PARA USE32
ASSUME CS:CODE2
mov al,0fch
out 21h,al
mov al,0fEh
out 0a1h,al

MOV AX,50H
MOV SS,ax
mov esp,400h
mov ax,58h
mov es,ax
mov ds,ax
mov fs,ax
mov gs,ax
mov edi,0
mov ecx,0fffh
mov ax,5220h
rep stosw

mov edi,200h
STI
pushfd
pop eax
or eax,100h
push eax
popfd
lll:
jmp lll
code2 ends


CODE3 SEGMENT PARA USE32
ASSUME CS:CODE3
PUSH GS
PUSH FS
PUSH DS
PUSH ES
PUSH EDI
PUSH ESI
PUSH EBP
PUSH EBX
PUSH EDX
PUSH ECX
PUSH EAX
mov ax,58h
MOV ES,AX
MOV EDI,100h
MOV AL,0
OUT 70H,AL
IN AL,71H
MOV DL,AL
MOV CL,4
SHR AL,CL
CMP AL,9
JBE L0
ADD AL,7
L0:ADD AL,30H
MOV AH,42H
STOSW
MOV al,dl
AND AL,0FH
CMP AL,9
JBE L1
ADD AL,7
L1:
ADD AL,30H
MOV AH,42H
STOSW
POP EAX
POP ECX
POP EDX
POP EBX
POP  EBP
POP ESI
POP EDI
POP ES
POP DS
POP FS
POP GS
MOV AL,20H
OUT 20H,AL
IRETD
CODE3 ENDS

CODE4 SEGMENT PARA USE32
ASSUME CS:CODE4
cli
PUSH EAX
PUSH EBX
PUSH ECX
PUSH EDX
PUSH DS
PUSH ES
push fs
push gs
MOV AX,20H
MOV DS,AX
MOV AH,52H
XOR EBX,EBX
MOV BX,OFFSET SCANTOASC
JMP SHOWASC

SCANTOASC:
DB 0,26H,'1234567890','-+',8,9,'QWERTYUIOP[]',0DH,1H,'ASDFGHJKL;"','`',4
DB '|ZXCVBNM,./',5,3,2,20H,17H,21H,22H,23H,24H,25H,26H,27H,28H,29H,16H,18H,19H
DB 11H,12H, '789-456+1230',7FH,100h dup (0)

SHOWASC:
IN AL,60H
CMP AL,1
JZ QUIT
CMP AL,80H
JAE ENDKEY
XLAT
STOSW

ENDKEY:
pop gs
pop fs
POP ES
POP DS
POP EDX
POP ECX
POP EBX
POP EAX
mov al,20h
out 20h,al
IRETD

quit:
pop gs
pop fs
pop es
pop ds
pop edx
pop ecx
pop ebx
pop eax
MOV AL,20H
OUT 20H,AL

PUSHFD
POP EAX
AND EAX,0FFFFBFFFH
PUSH EAX
POPFD

mov ax,50h
mov ss,ax
mov esp,600h
db 0eah
dw  offset lll  ; offset toreal
dw 0
dw 8H
CODE4 ENDS

CODE5 SEGMENT PARA USE32
ASSUME CS:CODE5
;PUSH GS
;PUSH FS
;PUSH DS
;PUSH SS
;PUSH ES
PUSH EDI
PUSH ESI
PUSH EBP
;PUSH ESP
PUSH EDX
PUSH ECX
PUSH EBX
PUSH EAX
MOV AX,58H
MOV ES,AX
MOV EDI,3C0H  ;960D
MOV AX,28H
MOV DS,AX
MOV ESI,OFFSET REG1
CLD
MOV ECX,7
jmp sHOWNEXT

REG1 DB 'EAX='
REG2 DB 'EBX='
REG3 DB 'ECX='
REG4 DB 'EDX='
;REG5 DB 'ESP='
REG6 DB 'EBP='
REG7 DB 'ESI='
REG8 DB 'EDI='
;REG9 DB 'ES= '
;REG10 DB 'SS= '
;REG11 DB 'DS= '
;REG12 DB 'FS= '
;REG13 DB 'GS= '
;REG14 DB 'eip='
;REG15 DB 'cs= '
;db 10h dup (0)



SHOWNEXT:
LODSB
MOV AH,4
STOSW

LODSB
STOSW

LODSB
STOSW

LODSB
STOSW

POP EAX
MOV EBX,EAX
SHL EAX,28
SHR EAX,28
CMP AL,9
JBE A0
ADD al,7
a0:
ADD AL,30H
MOV AH,4H
STOSW

MOV EAX,EBX
SHL EAX,24
SHR EAX,28
CMP AL,9
JBE A1
ADD AL,7
A1:
ADD AL,30H
MOV AH,4H
STOSW

MOV EAX,EBX
SHL EAX,20
SHR EAX,28
CMP AL,9
JBE A2
ADD AL,7
A2:
ADD AL,30H
MOV AH,4H
STOSW

MOV EAX,EBX
SHL EAX,16
sHR EAX,28
cmp al,9
JBE A3
ADD AL,7
A3:
ADD AL,30H
MOV AH,4H
STOSW

MOV EAX,EBX
SHL EAX,12
SHR EAX,28
CMP AL,9
JBE A4
ADD AL,7
A4:
ADD AL,30H
MOV AH,4H
STOSW

MOV EAX,EBX
SHL EAX,8
SHR EAX,28
CMP AL,9
JBE A5
ADD AL,7
A5:
ADD AL,30H
MOV AH,4H
STOSW

MOV EAX,EBX
SHL EAX,4
SHR EAX,28
CMP AL,9
JBE A6
ADD AL,7
A6:
ADD AL,30H
MOV AH,4H
STOSW

MOV EAX,EBX
SHR EAX,28
CMP AL,9
JBE A7
ADD AL,7
A7:
ADD AL,30H
MOV AH,4H
STOSW

MOV AX,4020H
STOSW
DEC eCX
CMP eCX,0
JNZ SHOWNEXT

LOOP5:IN AL,64H
TEST AL,1
JZ LOOP5
IN AL,60H
CMP AL,80H
JAE LOOP5

sub esp,28

POP EAX
POP EBX
POP ECX
POP EDX
;POP ESP
POP EBP
POP ESI
POP EDI
;POP ES
;POP SS
;POP DS
;POP FS
;POP GS
IRETD
CODE5 ENDS

CODE6 SEGMENT PARA USE32
ASSUME CS:CODE6
CLI
pushfd
pop eax
AND EAX,0FFFFBFFFH
PUSH EAX
POPFD

PUSH EAX
PUSH EBX
PUSH EDI
PUSH ES

JMP SHOWINT3
INT3MESSAGE DB "INTRRUPT 3 OCCURRED!",24H

SHOWINT3:
MOV AX,58H
MOV ES,AX
MOV EDI,0
MOV BX,OFFSET INT3MESSAGE
LOOP1:
MOV AL,BYTE PTR CS:[BX]
CMP AL,24H
JZ ENDINT3

STOSB
INC BX
MOV AL,31H
STOSB
JMP LOOP1

ENDINT3:
POP ES
POP EDI
POP EBX
POP EAX
IRETD
CODE6 ENDS


CODE7 SEGMENT PARA USE32
ASSUME CS:CODE7

PUSHFD
POP EAX
AND EAX,0FFFFBFFFH
PUSH EAX
POPFD
int 3
mov bx,33h

PUSHFD
POP EAX
OR EAX,100H
PUSH EAX
POPFD

MOV AX,1
MOV BX,1
MOV CX,1
MOV DX,1
MOV SI,1
MOV DI,1
MOV BP,1
mov ax,2
mov bx,2
mov cx,2
mov dx,2
mov si,2
mov bp,2
mov di,2

DB 09AH
DW OFFSET TOREAL
DW 0
DW 8

CODE7 ENDS

CODE8 SEGMENT PARA USE32
ASSUME CS:CODE8
IRETD
CODE8 ENDS

CODE9 SEGMENT PARA USE32
ASSUME CS:CODE9
IRETD
CODE9 ENDS

CODE0 SEGMENT PARA USE16
ASSUME CS:CODE0,DS:GDTSEG,ES:GDTPOINTER,FS:IDTSEG,GS:IDTPOINTER
START:
MOV AX,GDTSEG
MOV DS,AX
MOV AX,GDTPOINTER
MOV ES,AX

XOR EAX,EAX
MOV AX,GDTSEG
SHL EAX,4
MOV DWORD PTR ES:[GDTBASE],EAX

xor eax,eax
mov ax,code1
shl eax,4
mov word ptr ds:[gdt1+2],ax
shr eax,16
mov byte ptr ds:[gdt1+4],al

xor eax,eax
mov ax,code2
shl eax,4
mov word ptr ds:[gdt2+2],ax
shr eax,16
mov byte ptr ds:[gdt2+4],al

xor eax,eax
mov ax,code3
shl eax,4
mov word ptr ds:[gdt3+2],ax
shr eax,16
mov byte ptr ds:[gdt3+4],al

xor eax,eax
mov ax,code4
shl eax,4
mov word ptr ds:[gdt4+2],ax
shr eax,16
mov byte ptr ds:[gdt4+4],al

xor eax,eax
mov ax,code5
shl eax,4
mov word ptr ds:[gdt5+2],ax
shr eax,16
mov byte ptr ds:[gdt5+4],al

MOV AX,CODE6
SHL EAX,4
MOV WORD PTR DS:[GDT6+2],AX
SHR EAX,16
MOV BYTE PTR DS:[GDT6+4],AL

MOV AX,CODE7
SHL EAX,4
MOV WORD PTR DS:[GDT7+2],AX
SHR EAX,16
MOV BYTE PTR DS:[GDT7+4],AL

MOV AX,CODE8
SHL EAX,4
MOV WORD PTR DS:[GDT8+2],AX
SHR EAX,16
MOV BYTE PTR DS:[GDT8+4],AL

MOV AX,CODE9
SHL EAX,4
MOV WORD PTR DS:[GDT9+2],AX
SHR EAX,16
MOV BYTE PTR DS:[GDT9+4],AL

mov ax,stack0
shl eax,4
mov word ptr ds:[gdt10+2],AX
SHR EAX,16
MOV BYTE PTR DS:[GDT10+4],AL

MOV AX,IDTSEG
MOV FS,AX
MOV AX,IDTPOINTER
MOV GS,AX
XOR EAX,EAX
MOV AX,IDTSEG
SHL EAX,4
MOV DWORD PTR GS:[IDTBASE],EAX

CLI
MOV AL,2
OUT 92H,AL
LGDT QWORD PTR ES:[GDTLIMIT]
LIDT   QWORD PTR GS:[IDTLIMIT]

mov eax,cr0
or al,1
mov cr0,eax
db 09ah
dw 0
dw 8

real:

MOV AL,11H
OUT 20H,AL
OUT 0A0H,AL

MOV AL,8
OUT 21H,AL
MOV AL,70H
OUT 0A1H,AL

MOV AL,4
OUT 21H,AL
MOV AL,2
OUT 0A1H,AL

MOV AL,11H
OUT 21H,AL
OUT 0A1H,AL

ASSUME GS:IDTPOINTER
MOV AX,STACK0
MOV SS,AX
MOV AX,IDTPOINTER
MOV GS,AX
LIDT QWORD PTR GS:[DOSIDTLIMIT]
mov ax,3
int 10h
mov ah,4ch
int 21h
code0 ends
end start



